/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (tcpreplay_opts.h)
 *  
 *  It has been AutoGen-ed  November 28, 2013 at 09:14:57 AM by AutoGen 5.10
 *  From the definitions    tcpreplay_opts.def
 *  and the template file   options
 *
 * Generated from AutoOpts 33:0:8 templates.
 */

/*
 *  This file was produced by an AutoOpts template.  AutoOpts is a
 *  copyrighted work.  This header file is not encumbered by AutoOpts
 *  licensing, but is provided under the licensing terms chosen by the
 *  tcpreplay author or copyright holder.  AutoOpts is licensed under
 *  the terms of the LGPL.  The redistributable library (``libopts'') is
 *  licensed under the terms of either the LGPL or, at the users discretion,
 *  the BSD license.  See the AutoOpts and/or libopts sources for details.
 *
 * This source file is copyrighted and licensed under the following terms:
 *
 * tcpreplay copyright (c) 2000-2010 Aaron Turner - all rights reserved
 *
 * tcpreplay is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * tcpreplay is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the tcpreplay program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */
#ifndef AUTOOPTS_TCPREPLAY_OPTS_H_GUARD
#define AUTOOPTS_TCPREPLAY_OPTS_H_GUARD 1
#include "config.h"
#include <autoopts/options.h>

/*
 *  Ensure that the library used for compiling this generated header is at
 *  least as new as the version current when the header template was released
 *  (not counting patch version increments).  Also ensure that the oldest
 *  tolerable version is at least as old as what was current when the header
 *  template was released.
 */
#define AO_TEMPLATE_VERSION 135168
#if (AO_TEMPLATE_VERSION < OPTIONS_MINIMUM_VERSION) \
 || (AO_TEMPLATE_VERSION > OPTIONS_STRUCT_VERSION)
# error option template version mismatches autoopts/options.h header
  Choke Me.
#endif

/*
 *  Enumeration of each option:
 */
typedef enum {
    INDEX_OPT_DBUG               =  0,
    INDEX_OPT_QUIET              =  1,
    INDEX_OPT_TIMER              =  2,
    INDEX_OPT_SLEEP_ACCEL        =  3,
    INDEX_OPT_RDTSC_CLICKS       =  4,
    INDEX_OPT_VERBOSE            =  5,
    INDEX_OPT_DECODE             =  6,
    INDEX_OPT_ENABLE_FILE_CACHE  =  7,
    INDEX_OPT_PRELOAD_PCAP       =  8,
    INDEX_OPT_CACHEFILE          =  9,
    INDEX_OPT_DUALFILE           = 10,
    INDEX_OPT_INTF1              = 11,
    INDEX_OPT_INTF2              = 12,
    INDEX_OPT_LISTNICS           = 13,
    INDEX_OPT_LOOP               = 14,
    INDEX_OPT_PKTLEN             = 15,
    INDEX_OPT_LIMIT              = 16,
    INDEX_OPT_MULTIPLIER         = 17,
    INDEX_OPT_PPS                = 18,
    INDEX_OPT_MBPS               = 19,
    INDEX_OPT_TOPSPEED           = 20,
    INDEX_OPT_ONEATATIME         = 21,
    INDEX_OPT_PPS_MULTI          = 22,
    INDEX_OPT_NETMAP             = 23,
    INDEX_OPT_PID                = 24,
    INDEX_OPT_STATS              = 25,
    INDEX_OPT_VERSION            = 26,
    INDEX_OPT_LESS_HELP          = 27,
    INDEX_OPT_HELP               = 28,
    INDEX_OPT_MORE_HELP          = 29,
    INDEX_OPT_SAVE_OPTS          = 30,
    INDEX_OPT_LOAD_OPTS          = 31
} teOptIndex;

#define OPTION_CT    32

/*
 *  Interface defines for all options.  Replace "n" with the UPPER_CASED
 *  option name (as in the teOptIndex enumeration above).
 *  e.g. HAVE_OPT( DBUG )
 */
#define         DESC(n) (tcpreplayOptions.pOptDesc[INDEX_OPT_## n])
#define     HAVE_OPT(n) (! UNUSED_OPT(& DESC(n)))
#define      OPT_ARG(n) (DESC(n).optArg.argString)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT_MASK;   \
                if ( (DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = NULL )

/* * * * * *
 *
 *  Interface defines for specific options.
 */
#define VALUE_OPT_DBUG           'd'
#ifdef DEBUG

#define OPT_VALUE_DBUG           (DESC(DBUG).optArg.argInt)
#endif /* DEBUG */
#define VALUE_OPT_QUIET          'q'
#define VALUE_OPT_TIMER          'T'
#define VALUE_OPT_SLEEP_ACCEL    3

#define OPT_VALUE_SLEEP_ACCEL    (DESC(SLEEP_ACCEL).optArg.argInt)
#define VALUE_OPT_RDTSC_CLICKS   4

#define OPT_VALUE_RDTSC_CLICKS   (DESC(RDTSC_CLICKS).optArg.argInt)
#define VALUE_OPT_VERBOSE        'v'
#ifdef ENABLE_VERBOSE

#define SET_OPT_VERBOSE   STMTS( \
        DESC(VERBOSE).optActualIndex = 5; \
        DESC(VERBOSE).optActualValue = VALUE_OPT_VERBOSE; \
        DESC(VERBOSE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(VERBOSE).fOptState |= OPTST_SET )
#endif /* ENABLE_VERBOSE */
#define VALUE_OPT_DECODE         'A'
#define VALUE_OPT_ENABLE_FILE_CACHE 'K'
#define VALUE_OPT_PRELOAD_PCAP   8
#define VALUE_OPT_CACHEFILE      'c'
#define VALUE_OPT_DUALFILE       '2'
#define VALUE_OPT_INTF1          'i'
#define VALUE_OPT_INTF2          'I'
#define VALUE_OPT_LISTNICS       13
#define VALUE_OPT_LOOP           'l'

#define OPT_VALUE_LOOP           (DESC(LOOP).optArg.argInt)
#define VALUE_OPT_PKTLEN         15
#define VALUE_OPT_LIMIT          'L'

#define OPT_VALUE_LIMIT          (DESC(LIMIT).optArg.argInt)
#define VALUE_OPT_MULTIPLIER     'x'
#define VALUE_OPT_PPS            'p'

#define OPT_VALUE_PPS            (DESC(PPS).optArg.argInt)
#define VALUE_OPT_MBPS           'M'
#define VALUE_OPT_TOPSPEED       't'
#define VALUE_OPT_ONEATATIME     'o'
#define VALUE_OPT_PPS_MULTI      22

#define OPT_VALUE_PPS_MULTI      (DESC(PPS_MULTI).optArg.argInt)
#define VALUE_OPT_NETMAP         23
#define VALUE_OPT_PID            'P'
#define VALUE_OPT_STATS          25

#define OPT_VALUE_STATS          (DESC(STATS).optArg.argInt)
#define VALUE_OPT_VERSION        'V'
#define VALUE_OPT_LESS_HELP      'h'
#define VALUE_OPT_HELP          'H'
#define VALUE_OPT_MORE_HELP     '!'
#define VALUE_OPT_SAVE_OPTS     INDEX_OPT_SAVE_OPTS
#define VALUE_OPT_LOAD_OPTS     INDEX_OPT_LOAD_OPTS
#define SET_OPT_SAVE_OPTS(a)   STMTS( \
        DESC(SAVE_OPTS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(SAVE_OPTS).fOptState |= OPTST_SET; \
        DESC(SAVE_OPTS).optArg.argString = (char const*)(a) )
/*
 *  Interface defines not associated with particular options
 */
#define ERRSKIP_OPTERR  STMTS( tcpreplayOptions.fOptSet &= ~OPTPROC_ERRSTOP )
#define ERRSTOP_OPTERR  STMTS( tcpreplayOptions.fOptSet |= OPTPROC_ERRSTOP )
#define RESTART_OPT(n)  STMTS( \
                tcpreplayOptions.curOptIdx = (n); \
                tcpreplayOptions.pzCurOpt  = NULL )
#define START_OPT       RESTART_OPT(1)
#define USAGE(c)        (*tcpreplayOptions.pUsageProc)( &tcpreplayOptions, c )
/* extracted from /usr/share/autogen/opthead.tpl near line 409 */

/* * * * * *
 *
 *  Declare the tcpreplay option descriptor.
 */
#ifdef  __cplusplus
extern "C" {
#endif

extern tOptions   tcpreplayOptions;

#if defined(ENABLE_NLS)
# ifndef _
#   include <stdio.h>
    static inline char* aoGetsText( char const* pz ) {
        if (pz == NULL) return NULL;
        return (char*)gettext( pz );
    }
#   define _(s)  aoGetsText(s)
# endif /* _() */

# define OPT_NO_XLAT_CFG_NAMES  STMTS(tcpreplayOptions.fOptSet |= \
                                    OPTPROC_NXLAT_OPT_CFG;)
# define OPT_NO_XLAT_OPT_NAMES  STMTS(tcpreplayOptions.fOptSet |= \
                                    OPTPROC_NXLAT_OPT|OPTPROC_NXLAT_OPT_CFG;)

# define OPT_XLAT_CFG_NAMES     STMTS(tcpreplayOptions.fOptSet &= \
                                  ~(OPTPROC_NXLAT_OPT|OPTPROC_NXLAT_OPT_CFG);)
# define OPT_XLAT_OPT_NAMES     STMTS(tcpreplayOptions.fOptSet &= \
                                  ~OPTPROC_NXLAT_OPT;)

#else   /* ENABLE_NLS */
# define OPT_NO_XLAT_CFG_NAMES
# define OPT_NO_XLAT_OPT_NAMES

# define OPT_XLAT_CFG_NAMES
# define OPT_XLAT_OPT_NAMES

# ifndef _
#   define _(_s)  _s
# endif
#endif  /* ENABLE_NLS */

#ifdef  __cplusplus
}
#endif
#endif /* AUTOOPTS_TCPREPLAY_OPTS_H_GUARD */
/* tcpreplay_opts.h ends here */
