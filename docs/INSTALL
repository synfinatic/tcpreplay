$Id$

1. Simple directions for Unix users:

cmake -G "Unix Makefiles"
make
sudo make install

2. More details

As of Tcpreplay 4.0, the build system has moved from GNU Autoconf to CMake.
While Autoconf may be the closest thing to an "industry standard", it's 
also unfortunately very difficult for developers to use and does not allow for 
building native Windows applications.

The 'cmake' application replaces the old './configure' command.  In most 
cases you can just run 'cmake' without any arguments and it will detect 
your system and generate the appropriate Makefiles.

If you want more control over the configuration process you can run 
'cmake -i' (prompts for configuration options) or 'ccmake' (a curses UI 
configurator).

For more information about CMake, visit: http://www.cmake.org

3. Build netmap feature

This feature will detect netmap capable network drivers on Linux and BSD 
systems. If detected, the network driver is bypassed for the execution 
duration of tcpreplay and tcpreplay-edit, and network buffers will be 
written to directly. This will allow you to achieve full line rates on 
commodity network adapters, similar to rates achieved by commercial network 
traffic generators.

Note that bypassing the network driver will disrupt other applications connected
through the test interface. Don't test on the same interface you ssh'ed into.

Download latest netmap sources from http://info.iet.unipi.it/~luigi/netmap/
If you extracted netmap into /usr/src/ you can build normally. Otherwise you 
will have to specify the netmap source directory, for example:

NETMAP_DIR=/home/fklassen/git/netmap/ cmake -G "Unix Makefiles"
make
sudo make install

4. Simple directions for everyone else:

Sorry you're out of luck.

Right now, Tcpreplay 4.0-Alpha only supports Unix based systems like Linux and
OS X.  I hope to add support for Windows as well, but I haven't gotten there yet.
If you're a Windows developer and are interested in helping port Tcpreplay to
Windows, please contact me!
